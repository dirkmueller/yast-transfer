/****************************************************************************

Copyright (c) 2000 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:    modules/HTTP.ycp
 * Package: Transfer Protocols
 * Summary: Handle HTTP Requests
 * Authors: Anas Nashif <nashif@suse.de>
 * Flags:   Stable
 *
 * $Id$
 */

{

module "HTTP";

global string user = "";
global string password = "";

/**
 * Send a get request
 * @param url url in any standard form
 * @param output file to save result to
 * @return map Reponse map with HTTP code and transfer size and time
 */
global define map Get(string url, string output) ``{
    y2debug("URL: %1", url);
    map response = (map) SCR::Execute(.curl.get, url, $["output":output]);
    return response;
}

/**
 * Send a post request
 * @param url url in any standard form
 * @param output file to save result to
 * @param postdata the rest of the url and whatever comes after the ? in the URL
 * @return map Reponse map with HTTP code and transfer size and time
 */

global define map Post(string url, string output, string postData) ``{
    y2debug("URL: %1", url);
    map response = (map) SCR::Execute(.curl.get, url, $["output":output, "data":postData]);
    return response;
}


/**
 * Set user and password for HTTP authentication
 */


global define map setUserPassword() ``{
    string userpass = sformat("%1:%2", user , password );
    return (map) SCR::Execute(.curl.setUserPassword, userpass, $[]);
}

global define void easySSL( boolean easy ) ``{
    y2debug("setting easySSL to %1",easy);
    SCR::Execute(.curl.easySSL, easy, $[]);
    return;
}

global define void clientCertSSL( string cert_path ) ``{
    y2debug("setting clientCertSSL to %1",cert_path);
    SCR::Execute(.curl.clientCertSSL, cert_path, $[]);
    return;
}

global define void clientKeySSL( string key_path ) ``{
    y2debug("setting clientKeySSL to %1",key_path);
    SCR::Execute(.curl.clientKeySSL, key_path, $[]);
    return;
}


/* EOF */
}
